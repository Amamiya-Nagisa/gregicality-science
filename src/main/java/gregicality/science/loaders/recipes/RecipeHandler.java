package gregicality.science.loaders.recipes;

import gregicality.science.loaders.recipes.categories.*;
import gregicality.science.loaders.recipes.categories.circuits.CircuitRecipes;
import gregicality.science.loaders.recipes.chain.*;
import gregtech.api.GTValues;
import gregtech.api.recipes.ingredients.IntCircuitIngredient;
import gregtech.api.unification.material.Material;
import gregtech.api.unification.material.properties.BlastProperty;
import gregtech.api.unification.material.properties.FluidProperty;
import gregtech.api.unification.material.properties.PropertyKey;
import gregtech.api.unification.ore.OrePrefix;

import static gregicality.science.api.GCYSMaterials.LiquidHelium;
import static gregicality.science.loaders.recipes.GCYSRecipeMaps.PLASMA_CONDENSER_RECIPES;
import static gregtech.api.unification.material.Materials.Helium;
import static gregtech.api.unification.ore.OrePrefix.dust;
import static gregtech.api.unification.ore.OrePrefix.ingot;

/**
 * Primary Recipe Registration Class
 */
public class RecipeHandler {

    /**
     * GT Material Handler registration.
     * This probably isn't the method you are looking for.
     */
    public static void register() {


        dust.addProcessingHandler(PropertyKey.FLUID, RecipeHandler::registerPlasmaCondenserRecipes);
        ingot.addProcessingHandler(PropertyKey.BLAST, RecipeHandler::registerStellarForgeRecipes);
    }


    /**
     * Main Method for initializing recipe chains,
     * located in the "recipes/chain" directory.
     */
    public static void initChains() {
        NaquadahChain.init();
        PolymerChain.init();
        PlatinumSludgeGroupChain.init();
        TungstenChain.init();
        REEChain.init();
        Batteries.init();
        RheniumChain.init();
        UHVMaterials.init();
        ZylonChain.init();
        FullereneChain.init();
        BariumChain.init();
        UraniumChain.init();
        IodineChain.init();
        ZirconChain.init();
        GermaniumChain.init();
        AmmoniaChain.init();
        BrineChain.init();
        FusionElementsChain.init();
        NanotubeChain.init();
        VariousChains.init();
        SuperconductorsSMDChain.init();
        FusionComponents.init();
        NiobiumTantalumChain.init();
        SensorEmitter.init();
        SeleniumChain.init();
        WormholeGeneratorChain.init();
        CosmicChain.init();
        UltimateMaterials.init();
        WetwareChain.init();
        OpticalChain.init();
        CombinedChains.init();
        OrganometallicChains.init();
        QuantumDotsChain.init();
        HNIWChain.init();
    }

    /**
     * Main Recipe Addition Method for recipes outside of autogenerated
     * recipes and chemistry chains.
     */
    public static void initRecipes() {
//        RecipeOverride.init();
        CircuitRecipes.init();
        ComponentRecipes.init();
        MetaItemRecipes.init();
        CasingRecipes.init();
        SuperconductorRecipes.init();
        MiscRecipes.init();
    }

    /**
     * Plasma to Fluid plasma condenser recipes
     * <p>
     * + Plasma Condenser recipes
     */
    private static void registerPlasmaCondenserRecipes(OrePrefix prefix, Material material, FluidProperty property) {
        if (material.hasProperty(PropertyKey.PLASMA) && material.hasProperty(PropertyKey.FLUID)) {
            int fluidAmount = material.hasFluid() ? GTValues.L : 100;

            PLASMA_CONDENSER_RECIPES.recipeBuilder().duration((int) material.getMass()).EUt(960)
                    .fluidInputs(LiquidHelium.getFluid(100))
                    .fluidInputs(material.getPlasma(fluidAmount))
                    .notConsumable(new IntCircuitIngredient(1))
                    .fluidOutputs(Helium.getFluid(100))
                    .fluidOutputs(material.getFluid(fluidAmount))
                    .buildAndRegister();
        }
    }

    /**
     * Stellar Forge Recipes for materials with too large EBF temperatures
     * <p>
     * + Stellar Forge EBF recipe analogues
     */
    private static void registerStellarForgeRecipes(OrePrefix prefix, Material material, BlastProperty property) {
//        if (property.getBlastTemperature() >= 14500) {
//            int duration = Math.max(1, (int) (material.getAverageMass() * 100L));
//
//            ItemStack explosive;
//            if (property.getBlastTemperature() >= 65000)
//                explosive = GCYSMetaBlocks.EXPLOSIVE.getItemVariant(GAExplosive.ExplosiveType.QCD_CHARGE);
//            else if (property.getBlastTemperature() >= 35000)
//                explosive = GCYSMetaBlocks.EXPLOSIVE.getItemVariant(GAExplosive.ExplosiveType.LEPTONIC_CHARGE);
//            else if (property.getBlastTemperature() >= 22500)
//                explosive =  GCYSMetaBlocks.EXPLOSIVE.getItemVariant(GAExplosive.ExplosiveType.TARANIUM_CHARGE);
//            else
//                explosive = GCYSMetaBlocks.EXPLOSIVE.getItemVariant(GAExplosive.ExplosiveType.NAQUADRIA_CHARGE);
//
//            STELLAR_FORGE_RECIPES.recipeBuilder().duration(duration).EUt(7680)
//                    .input(dust, material)
//                    .inputs(explosive)
//                    .fluidOutputs(material.getFluid(L))
//                    .buildAndRegister();
//        }
    }
}
