package gregicadditions.fluid;

import gregtech.api.unification.material.MaterialRegistry;
import gregtech.api.unification.material.properties.BlastProperty;
import gregtech.api.unification.material.properties.PropertyKey;
import gregtech.api.util.FluidTooltipUtil;
import gregtech.api.util.GTUtility;
import gregtech.api.unification.material.Material;
import net.minecraft.client.renderer.texture.TextureMap;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.fluids.Fluid;
import net.minecraftforge.fluids.FluidRegistry;
import net.minecraftforge.fluids.FluidStack;

import java.util.HashMap;
import java.util.Map;

public class GAMetaFluids {


    //public static final Map<FluidMaterial, Fluid> HOT_FLUIDS = new HashMap<>();
    public static final Map<Material, Fluid> MOLTEN_FLUIDS = new HashMap<>();

    public static final ResourceLocation AUTO_GENERATED_MOLTEN_TEXTURE = new ResourceLocation("gregtech", "blocks/fluids/fluid.hot.autogenerated");

    public static void registerSprites(TextureMap textureMap) {
        textureMap.registerSprite(AUTO_GENERATED_MOLTEN_TEXTURE);
    }

    public static void init() {
        /*
        HOT_FLUIDS.put(Steam, MetaFluids.registerFluid(Steam, MetaFluids.FluidType.valueOf("HOT"), 423));
        HOT_FLUIDS.put(Deuterium, MetaFluids.registerFluid(Deuterium, MetaFluids.FluidType.valueOf("HOT"), 618));
        HOT_FLUIDS.put(SodiumPotassiumAlloy, MetaFluids.registerFluid(SodiumPotassiumAlloy, MetaFluids.FluidType.valueOf("HOT"), 1058));
        HOT_FLUIDS.put(Sodium, MetaFluids.registerFluid(Sodium, MetaFluids.FluidType.valueOf("HOT"), 1156));
        HOT_FLUIDS.put(FLiNaK, MetaFluids.registerFluid(FLiNaK, MetaFluids.FluidType.valueOf("HOT"), 1843));
        HOT_FLUIDS.put(FLiBe, MetaFluids.registerFluid(FLiBe, MetaFluids.FluidType.valueOf("HOT"), 1703));
        HOT_FLUIDS.put(LeadBismuthEutectic, MetaFluids.registerFluid(LeadBismuthEutectic, MetaFluids.FluidType.valueOf("HOT"), 1943));

        RadioactiveMaterial.REGISTRY.forEach((ingotMaterial, radioactiveMaterial) -> {
            radioactiveMaterial.fluidHexachloride = MetaFluids.registerFluid(ingotMaterial, MetaFluids.FluidType.valueOf("HEXACHLORIDE"), 300, false);
            radioactiveMaterial.fluidHexafluoride = MetaFluids.registerFluid(ingotMaterial, MetaFluids.FluidType.valueOf("HEXAFLUORIDE"), 300, false);
        });

        IsotopeMaterial.REGISTRY.forEach((ingotMaterial, isotopeMaterial) -> {
            isotopeMaterial.fluidHexafluoride = MetaFluids.registerFluid(ingotMaterial, MetaFluids.FluidType.valueOf("HEXAFLUORIDE"), 300, false);
            isotopeMaterial.depletedFuelNitrateSolution = MetaFluids.registerFluid(ingotMaterial, MetaFluids.FluidType.valueOf("DEPLETED_FUEL_NITRATE_SOLUTION"), 300, false);
            isotopeMaterial.hexafluorideSteamCracked = MetaFluids.registerFluid(ingotMaterial, MetaFluids.FluidType.valueOf("HEXAFLUORIDE_STEAM_CRACKED"), 300, false);
        });*/

        for (Material mat : MaterialRegistry.MATERIAL_REGISTRY) {
            BlastProperty blastProperty = mat.getProperty(PropertyKey.BLAST);
            if (blastProperty != null && blastProperty.getBlastTemperature() > 1750 && mat.getChemicalFormula().length() > 2) {
                Fluid moltenFluid = new Fluid(mat.toString() + "_molten", AUTO_GENERATED_MOLTEN_TEXTURE, AUTO_GENERATED_MOLTEN_TEXTURE, GTUtility.convertRGBtoOpaqueRGBA_MC(mat.getMaterialRGB()));
                moltenFluid.setTemperature(blastProperty.getBlastTemperature());
                if (!FluidRegistry.isFluidRegistered(moltenFluid.getName())) {
                    FluidRegistry.registerFluid(moltenFluid);
                    FluidTooltipUtil.registerTooltip(moltenFluid, mat.getChemicalFormula());
                    FluidRegistry.addBucketForFluid(moltenFluid);
                }
                MOLTEN_FLUIDS.put(mat, moltenFluid);
            }
        }
    }

    //@Nullable
    //public static FluidStack getHotFluid(Material material, int amount) {
    //    return new FluidStack(HOT_FLUIDS.get(material), amount);
    //}

    public static FluidStack getMoltenFluid(Material material, int amount) {
        return new FluidStack(MOLTEN_FLUIDS.get(material), amount);
    }
}
